{"version":3,"sources":["lib/CustomHooks.js","ScoreSelector.js","MyCard.js","OpponentCard.js","PlayersModal.js","App.js","serviceWorker.js","connection.js","index.js"],"names":["INSERT_STOP","gql","INSERT_SCORE","useStopForm","initialValues","initialScoreValues","callback","useState","inputs","setInputs","stopId","setStopId","scoreInputs","setScoreInputs","useMutation","insertGame","insertScore","getStopId","id","handleSubmit","event","values","disableButton","preventDefault","empty","key","trim","alert","variables","then","res","data","insert_stop","returning","handleSubmitScore","showTotal","console","log","handleInputChange","persist","target","name","value","handleInputScoreChange","fieldName","SCORES","ScoreSelector","onChange","selectedItem","readOnly","score","setScore","className","map","scoreItem","type","disabled","onClick","version","xmlns","xmlnsXlink","x","y","viewBox","style","enableBackground","xmlSpace","d","GET_POST","INSERT_GAME_PLAYER","GET_GAME_PLAYER","DELETE_PLAYER_ON_GAME","MyCard","currentPlayer","currentPlayerName","game","gameLetter","numberOfPlayers","setDisabled","disabledInput","setDisabledInput","loadData","setLoadData","listening","setListening","isFirstTime","setIsFirstTime","isTheEnd","setIsTheEnd","isReady","setIsReady","visibleLetter","setVisibleLetter","visibleTotal","setVisibleTotal","showLetter","setShowLetter","insertGamePlayer","deleteGameOnPlayer","useSubscription","game_id","player_id","loading","nombre","apellido","ciudad","pais","animal","fruta","color","cosa","stop_id","onSubscriptionData","playersList","games_players","length","slice","player","includes","document","getElementById","setTimeout","replace","showLetterPopUp","window","location","reload","checkNumOfPlayers","subscriptionData","e","stop","Fragment","onSubmit","autoComplete","scores","total","GET_PLAYERS_NAMES","OpponentCard","allData","setAllData","players","setPlayers","error","playersArray","filter","item","newData","idx","GET_PLAYERS_ON","INSERT_PLAYER","PlayersModal","props","visible","closeModal","playerName","setPlayerName","insertPlayer","playersOn","gameID","placeholder","pattern","RegExp","test","getPlayerInfo","insert_players","createPlayer","INSERT_GAME","GET_LAST_GAME","App","setGameID","setGameLetter","playerID","setPlayerID","temporalGameId","setTemporalGameId","active","setActive","visibleModal","setVisibleModal","setNumberOfPlayers","tempNumOfPlayers","InsertGame","prevGameIdRef","useRef","prevGameId","current","chooseLetter","result","characters","charactersLength","i","charAt","Math","floor","random","showModal","useEffect","games","letter","number_of_players","max","min","insert_games","Boolean","hostname","match","ApolloClient","cache","InMemoryCache","link","WebSocketLink","uri","options","reconnect","ReactDOM","render","client","connection","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.bf463ea6.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\n\r\nconst INSERT_STOP = gql`\r\n  mutation InsertStop(\r\n    $animal: String!\r\n    $apellido: String!\r\n    $ciudad: String!\r\n    $color: String!\r\n    $cosa: String!\r\n    $fruta: String!\r\n    $nombre: String!\r\n    $pais: String!\r\n    $player_id: Int!\r\n    $game_id: Int!\r\n  ) {\r\n    insert_stop(\r\n      objects: {\r\n        animal: $animal\r\n        apellido: $apellido\r\n        ciudad: $ciudad\r\n        color: $color\r\n        cosa: $cosa\r\n        fruta: $fruta\r\n        nombre: $nombre\r\n        pais: $pais\r\n        player_id: $player_id\r\n        game_id: $game_id\r\n      }\r\n    ) {\r\n      returning {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst INSERT_SCORE = gql`\r\n  mutation InsertScore(\r\n    $animal: Int!\r\n    $apellido: Int!\r\n    $ciudad: Int!\r\n    $color: Int!\r\n    $cosa: Int!\r\n    $fruta: Int!\r\n    $nombre: Int!\r\n    $pais: Int!\r\n    $stop_id: Int!\r\n  ) {\r\n    insert_stop_scores(\r\n      objects: {\r\n        animal: $animal\r\n        apellido: $apellido\r\n        ciudad: $ciudad\r\n        color: $color\r\n        cosa: $cosa\r\n        fruta: $fruta\r\n        nombre: $nombre\r\n        pais: $pais\r\n        stop_id: $stop_id\r\n      }\r\n    ) {\r\n      returning {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst useStopForm = (\r\n  initialValues,\r\n  initialScoreValues,\r\n  callback = () => {}\r\n) => {\r\n  const [inputs, setInputs] = useState(initialValues);\r\n  const [stopId, setStopId] = useState(null);\r\n\r\n  const [scoreInputs, setScoreInputs] = useState(initialScoreValues);\r\n  const [insertGame] = useMutation(INSERT_STOP);\r\n  const [insertScore] = useMutation(INSERT_SCORE);\r\n\r\n  function getStopId(id) {\r\n    setStopId(id);\r\n  }\r\n\r\n  const handleSubmit = (event, values, disableButton) => {\r\n    if (event) event.preventDefault();\r\n\r\n    let empty = false;\r\n\r\n    for (const key in values) {\r\n      if (typeof values[key] !== \"number\") {\r\n        if (values[key].trim() === \"\") {\r\n          empty = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (empty) {\r\n      alert(\"Debes llenar todos los campos.\");\r\n    } else {\r\n      disableButton();\r\n      insertGame({\r\n        variables: values\r\n      }).then(res => {\r\n        setStopId(res.data.insert_stop.returning[0].id);\r\n      });\r\n    }\r\n    callback();\r\n  };\r\n\r\n  const handleSubmitScore = (event, values, showTotal) => {\r\n    if (event) event.preventDefault();\r\n    let empty = false;\r\n\r\n    values[\"stop_id\"] = stopId;\r\n    console.log(\"values en el handle, \", values);\r\n\r\n    for (const key in values) {\r\n      if (values[key] === null) {\r\n        empty = true;\r\n      }\r\n    }\r\n\r\n    if (empty) {\r\n      alert(\"Aún no has puntuado todas tus respuestas\");\r\n    } else {\r\n      showTotal();\r\n      insertScore({\r\n        variables: values\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleInputChange = event => {\r\n    event.persist();\r\n    setInputs(inputs => ({\r\n      ...inputs,\r\n      [event.target.name]: event.target.value\r\n    }));\r\n  };\r\n\r\n  const handleInputScoreChange = (fieldName, value) => {\r\n    console.log(\"en el handle: \", fieldName, value);\r\n    setScoreInputs(scoreInputs => ({\r\n      ...scoreInputs,\r\n      [fieldName]: value\r\n    }));\r\n  };\r\n\r\n  return {\r\n    getStopId,\r\n    handleSubmit,\r\n    handleSubmitScore,\r\n    handleInputScoreChange,\r\n    handleInputChange,\r\n    inputs,\r\n    scoreInputs\r\n  };\r\n};\r\n\r\nexport default useStopForm;\r\n","import React, { useState } from \"react\";\r\n\r\nconst SCORES = [0, 50, 100];\r\n\r\nfunction ScoreSelector({\r\n  fieldName,\r\n  onChange = () => {},\r\n  selectedItem = null,\r\n  readOnly = false\r\n}) {\r\n  const [score, setScore] = useState(selectedItem);\r\n\r\n  function onClick(value) {\r\n    setScore(value);\r\n    onChange(fieldName, value);\r\n  }\r\n\r\n  return (\r\n    <div className=\"menu\">\r\n      {SCORES.map(scoreItem => (\r\n        <button\r\n          key={scoreItem}\r\n          type=\"button\"\r\n          name={fieldName}\r\n          value={scoreItem}\r\n          disabled={readOnly}\r\n          className={`menu__link${\r\n            score === scoreItem ? \" menu__link__active\" : \"\"\r\n          }`}\r\n          onClick={() => onClick(scoreItem)}\r\n        >\r\n          {scoreItem}\r\n          <svg\r\n            version=\"1.1\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\r\n            x=\"0px\"\r\n            y=\"0px\"\r\n            viewBox=\"0 0 152.9 43.4\"\r\n            style={{ enableBackground: \"new 0 0 152.9 43.4\" }}\r\n            xmlSpace=\"preserve\"\r\n          >\r\n            <path d=\"M151.9,13.6c0,0,3.3-9.5-85-8.3c-97,1.3-58.3,29-58.3,29s9.7,8.1,69.7,8.1c68.3,0,69.3-23.1,69.3-23.1 s1.7-10.5-14.7-18.4\" />\r\n          </svg>\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\nexport default ScoreSelector;\r\n","import React, { useState } from \"react\";\r\nimport { useSubscription, useMutation } from \"@apollo/react-hooks\";\r\nimport gql from \"graphql-tag\";\r\nimport useStopForm from \"./lib/CustomHooks\";\r\nimport ScoreSelector from \"./ScoreSelector\";\r\n\r\nconst GET_POST = gql`\r\n  subscription GetStop($game_id: Int!, $player_id: Int!) {\r\n    stop(\r\n      where: { game_id: { _eq: $game_id }, player_id: { _neq: $player_id } }\r\n    ) {\r\n      animal\r\n      apellido\r\n      ciudad\r\n      color\r\n      cosa\r\n      fruta\r\n      nombre\r\n      pais\r\n    }\r\n  }\r\n`;\r\n\r\nconst INSERT_STOP = gql`\r\n  mutation InsertStop(\r\n    $animal: String!\r\n    $apellido: String!\r\n    $ciudad: String!\r\n    $color: String!\r\n    $cosa: String!\r\n    $fruta: String!\r\n    $nombre: String!\r\n    $pais: String!\r\n    $player_id: Int!\r\n    $game_id: Int!\r\n  ) {\r\n    insert_stop(\r\n      objects: {\r\n        animal: $animal\r\n        apellido: $apellido\r\n        ciudad: $ciudad\r\n        color: $color\r\n        cosa: $cosa\r\n        fruta: $fruta\r\n        nombre: $nombre\r\n        pais: $pais\r\n        player_id: $player_id\r\n        game_id: $game_id\r\n      }\r\n    ) {\r\n      returning {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst INSERT_GAME_PLAYER = gql`\r\n  mutation InsertGamePlayer($game_id: Int!, $player_id: Int!) {\r\n    insert_games_players(\r\n      objects: { game_id: $game_id, player_id: $player_id }\r\n    ) {\r\n      returning {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_GAME_PLAYER = gql`\r\n  subscription GetGamePlayer($game_id: Int!) {\r\n    games_players(where: { game_id: { _eq: $game_id } }) {\r\n      player_id\r\n    }\r\n  }\r\n`;\r\n\r\nconst DELETE_PLAYER_ON_GAME = gql`\r\n  mutation DeletePlayerOnGame($player_id: Int!) {\r\n    delete_games_players(where: { player_id: { _eq: $player_id } }) {\r\n      returning {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function MyCard({\r\n  currentPlayer,\r\n  currentPlayerName,\r\n  game,\r\n  gameLetter,\r\n  numberOfPlayers\r\n}) {\r\n  const [disabled, setDisabled] = useState(true);\r\n  const [disabledInput, setDisabledInput] = useState(true);\r\n  const [loadData, setLoadData] = useState(false);\r\n  const [listening, setListening] = useState(true);\r\n  const [isFirstTime, setIsFirstTime] = useState(true);\r\n  const [isTheEnd, setIsTheEnd] = useState(false);\r\n  const [isReady, setIsReady] = useState(false);\r\n  const [visibleLetter, setVisibleLetter] = useState(false);\r\n  const [visibleTotal, setVisibleTotal] = useState(false);\r\n  const [showLetter, setShowLetter] = useState(true);\r\n\r\n  const [insertGame] = useMutation(INSERT_STOP);\r\n  const [insertGamePlayer] = useMutation(INSERT_GAME_PLAYER);\r\n  const [deleteGameOnPlayer] = useMutation(DELETE_PLAYER_ON_GAME);\r\n  const { loading, data = {} } = useSubscription(GET_POST, {\r\n    variables: { game_id: game, player_id: currentPlayer }\r\n  });\r\n  const {\r\n    getStopId,\r\n    inputs,\r\n    scoreInputs,\r\n    handleInputChange,\r\n    handleInputScoreChange,\r\n    handleSubmit,\r\n    handleSubmitScore\r\n  } = useStopForm(\r\n    {\r\n      nombre: \"\",\r\n      apellido: \"\",\r\n      ciudad: \"\",\r\n      pais: \"\",\r\n      animal: \"\",\r\n      fruta: \"\",\r\n      color: \"\",\r\n      cosa: \"\",\r\n      game_id: game,\r\n      player_id: currentPlayer\r\n    },\r\n    {\r\n      nombre: null,\r\n      apellido: null,\r\n      ciudad: null,\r\n      pais: null,\r\n      animal: null,\r\n      fruta: null,\r\n      color: null,\r\n      cosa: null,\r\n      stop_id: null\r\n    },\r\n    () => {}\r\n  );\r\n\r\n  const getGamePlayer = useSubscription(GET_GAME_PLAYER, {\r\n    variables: { game_id: game },\r\n    onSubscriptionData: ({ subscriptionData }) =>\r\n      checkNumOfPlayers(subscriptionData)\r\n  });\r\n\r\n  function checkNumOfPlayers(playersList) {\r\n    if (playersList.data.games_players.length < numberOfPlayers) {\r\n      if (!disabled && !disabledInput) {\r\n        setDisabled(true);\r\n        setDisabledInput(true);\r\n      }\r\n    } else {\r\n      //cuando los jugadores se completan, todo se habilita para que empiece el juego\r\n      if (playersList.data.games_players.length >= numberOfPlayers) {\r\n        // Cuando se supera la cantidad de jugadores permitidos\r\n        const allowedPlayersArray = playersList.data.games_players\r\n          .slice(0, numberOfPlayers)\r\n          .map(player => player.player_id);\r\n        if (allowedPlayersArray.includes(currentPlayer)) {\r\n          if (!visibleLetter && showLetter) {\r\n            setVisibleLetter(true);\r\n            setShowLetter(false);\r\n            showLetterPopUp();\r\n          }\r\n\r\n          if (disabled && disabledInput && !isReady) {\r\n            setDisabled(false);\r\n            setDisabledInput(false);\r\n            setIsReady(true);\r\n          }\r\n        } else {\r\n          if (disabled && disabledInput && !isReady) {\r\n            setDisabled(false);\r\n            setDisabledInput(false);\r\n            setIsReady(true);\r\n          }\r\n\r\n          // El jugador no se registró cuando aún habían cupos disponibles,\r\n          //así que se borra de la partida y se dirige a la página de inicio\r\n          deleteGameOnPlayer({ variables: { player_id: currentPlayer } });\r\n          window.location.reload();\r\n          alert(\r\n            \"Lo sentimos, hubo un jugador que se registró antes que tú y ocupó el tope de la partida\"\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (isFirstTime) {\r\n    //si es la primera vez que entra a la partida actual,\r\n    //registra el id del jugador con el id de la partida actual\r\n    setIsFirstTime(false);\r\n    insertGamePlayer({\r\n      variables: { game_id: game, player_id: currentPlayer }\r\n    });\r\n  }\r\n\r\n  if (!loading) {\r\n    // Si el otro jugador da stop, deshabilita mis campos\r\n    if (data.stop.length > 0 && !disabledInput) {\r\n      setDisabledInput(true);\r\n      setDisabled(true);\r\n      setLoadData(true);\r\n      setIsTheEnd(true);\r\n    }\r\n  }\r\n\r\n  if (disabledInput && loadData && listening) {\r\n    //cuando el oponente da stop, envía los datos a la base de datos\r\n    setLoadData(false);\r\n    setListening(false);\r\n\r\n    insertGame({\r\n      variables: inputs\r\n    }).then(res => {\r\n      getStopId(res.data.insert_stop.returning[0].id);\r\n    });\r\n  }\r\n\r\n  function disableButton() {\r\n    // Deshabilita el botón de stop para que no se oprima varias veces y haga muchos insert\r\n    setDisabled(true);\r\n    setListening(false);\r\n  }\r\n\r\n  function onChange(e) {\r\n    handleInputChange(e);\r\n  }\r\n\r\n  function showLetterPopUp() {\r\n    var x = document.getElementById(\"snackbar\");\r\n    x.className = \"show\";\r\n    setTimeout(function() {\r\n      x.className = x.className.replace(\"show\", \"\");\r\n    }, 3000);\r\n  }\r\n\r\n  function showTotal() {\r\n    setVisibleTotal(true);\r\n  }\r\n\r\n  function total(scores) {\r\n    let total = 0;\r\n\r\n    for (const key in scores) {\r\n      if (typeof scores[key] === \"number\" && key !== \"stop_id\") {\r\n        total += scores[key];\r\n      }\r\n    }\r\n    return `Total: ${total}`;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <form\r\n        onSubmit={e => handleSubmit(e, inputs, disableButton)}\r\n        autoComplete=\"off\"\r\n      >\r\n        <div id=\"snackbar\">{`Letra: ${gameLetter}`}</div>\r\n\r\n        <div className=\"card\">\r\n          <div className=\"header\">\r\n            <span>{visibleLetter ? `Letra: ${gameLetter}` : \" \"}</span>\r\n            <span>{`${currentPlayerName}`}</span>\r\n          </div>\r\n\r\n          <div className=\"table\">\r\n            <div>\r\n              <label>Nombre</label>\r\n              <input\r\n                name=\"nombre\"\r\n                type=\"text\"\r\n                onChange={e => onChange(e)}\r\n                value={inputs.nombre}\r\n                disabled={disabledInput}\r\n              />\r\n              {isTheEnd ? (\r\n                <ScoreSelector\r\n                  readOnly={visibleTotal}\r\n                  onChange={handleInputScoreChange}\r\n                  fieldName=\"nombre\"\r\n                />\r\n              ) : null}\r\n            </div>\r\n            <div>\r\n              <label>Apellido</label>\r\n              <input\r\n                name=\"apellido\"\r\n                type=\"text\"\r\n                onChange={e => onChange(e)}\r\n                value={inputs.apellido}\r\n                disabled={disabledInput}\r\n              />\r\n              {isTheEnd ? (\r\n                <ScoreSelector\r\n                  readOnly={visibleTotal}\r\n                  onChange={handleInputScoreChange}\r\n                  fieldName=\"apellido\"\r\n                />\r\n              ) : null}\r\n            </div>\r\n            <div>\r\n              <label>Ciudad</label>\r\n              <input\r\n                name=\"ciudad\"\r\n                type=\"text\"\r\n                onChange={e => onChange(e)}\r\n                value={inputs.ciudad}\r\n                disabled={disabledInput}\r\n              />\r\n              {isTheEnd ? (\r\n                <ScoreSelector\r\n                  readOnly={visibleTotal}\r\n                  onChange={handleInputScoreChange}\r\n                  fieldName=\"ciudad\"\r\n                />\r\n              ) : null}\r\n            </div>\r\n            <div>\r\n              <label>País</label>\r\n              <input\r\n                name=\"pais\"\r\n                type=\"text\"\r\n                onChange={e => onChange(e)}\r\n                value={inputs.pais}\r\n                disabled={disabledInput}\r\n              />\r\n              {isTheEnd ? (\r\n                <ScoreSelector\r\n                  readOnly={visibleTotal}\r\n                  onChange={handleInputScoreChange}\r\n                  fieldName=\"pais\"\r\n                />\r\n              ) : null}\r\n            </div>\r\n            <div>\r\n              <label>Animal</label>\r\n              <input\r\n                name=\"animal\"\r\n                type=\"text\"\r\n                onChange={e => onChange(e)}\r\n                value={inputs.animal}\r\n                disabled={disabledInput}\r\n              />\r\n              {isTheEnd ? (\r\n                <ScoreSelector\r\n                  readOnly={visibleTotal}\r\n                  onChange={handleInputScoreChange}\r\n                  fieldName=\"animal\"\r\n                />\r\n              ) : null}\r\n            </div>\r\n            <div>\r\n              <label>Fruta</label>\r\n              <input\r\n                name=\"fruta\"\r\n                type=\"text\"\r\n                onChange={e => onChange(e)}\r\n                value={inputs.fruta}\r\n                disabled={disabledInput}\r\n              />\r\n              {isTheEnd ? (\r\n                <ScoreSelector\r\n                  readOnly={visibleTotal}\r\n                  onChange={handleInputScoreChange}\r\n                  fieldName=\"fruta\"\r\n                />\r\n              ) : null}\r\n            </div>\r\n            <div>\r\n              <label>Color</label>\r\n              <input\r\n                name=\"color\"\r\n                type=\"text\"\r\n                onChange={e => onChange(e)}\r\n                value={inputs.color}\r\n                disabled={disabledInput}\r\n              />\r\n              {isTheEnd ? (\r\n                <ScoreSelector\r\n                  readOnly={visibleTotal}\r\n                  onChange={handleInputScoreChange}\r\n                  fieldName=\"color\"\r\n                />\r\n              ) : null}\r\n            </div>\r\n            <div>\r\n              <label>Cosa</label>\r\n              <input\r\n                name=\"cosa\"\r\n                type=\"text\"\r\n                onChange={e => onChange(e)}\r\n                value={inputs.cosa}\r\n                disabled={disabledInput}\r\n              />\r\n              {isTheEnd ? (\r\n                <ScoreSelector\r\n                  readOnly={visibleTotal}\r\n                  onChange={handleInputScoreChange}\r\n                  fieldName=\"cosa\"\r\n                />\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n          <div className=\"hole hole-top\"></div>\r\n          {/* <div className=\"hole hole-middle\"></div> */}\r\n          <div className=\"hole hole-bottom\"></div>\r\n          {isTheEnd && !visibleTotal ? (\r\n            <button\r\n              type=\"button\"\r\n              className=\"purple-button\"\r\n              onClick={e => handleSubmitScore(e, scoreInputs, showTotal)}\r\n            >\r\n              Publicar mi resultado\r\n            </button>\r\n          ) : null}\r\n          {isTheEnd && visibleTotal ? <span>{total(scoreInputs)}</span> : null}\r\n        </div>\r\n        <button\r\n          type=\"submit\"\r\n          className={`stop-button ${isTheEnd ? \"end\" : \"\"}`}\r\n          disabled={disabled}\r\n        >\r\n          Stop!\r\n        </button>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useSubscription } from \"@apollo/react-hooks\";\r\nimport gql from \"graphql-tag\";\r\nimport ScoreSelector from \"./ScoreSelector\";\r\n\r\nconst GET_POST = gql`\r\n  subscription GetStop($game_id: Int!, $player_id: Int!) {\r\n    stop(\r\n      where: { game_id: { _eq: $game_id }, player_id: { _neq: $player_id } }\r\n    ) {\r\n      animal\r\n      apellido\r\n      ciudad\r\n      color\r\n      cosa\r\n      fruta\r\n      nombre\r\n      pais\r\n      id\r\n      player {\r\n        nombre\r\n      }\r\n      stop_scores {\r\n        animal\r\n        apellido\r\n        ciudad\r\n        color\r\n        cosa\r\n        fruta\r\n        nombre\r\n        pais\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_PLAYERS_NAMES = gql`\r\n  subscription GetPlayersNames($game_id: Int!) {\r\n    games_players(where: { game_id: { _eq: $game_id } }) {\r\n      player {\r\n        nombre\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function OpponentCard({ currentPlayer, game }) {\r\n  const [allData, setAllData] = useState([]);\r\n  const [players, setPlayers] = useState([]);\r\n\r\n  const { loading, error, data } = useSubscription(GET_POST, {\r\n    variables: { game_id: game, player_id: currentPlayer },\r\n    onSubscriptionData: ({ subscriptionData }) => {\r\n      setAllData(subscriptionData.data.stop);\r\n    }\r\n  });\r\n\r\n  const getPlayersNames = useSubscription(GET_PLAYERS_NAMES, {\r\n    variables: { game_id: game },\r\n    onSubscriptionData: ({ subscriptionData }) => {\r\n      const playersArray = subscriptionData.data.games_players\r\n        .filter(item => item[\"player\"][\"id\"] !== currentPlayer)\r\n        .map(item => item[\"player\"][\"nombre\"]);\r\n      setPlayers(playersArray);\r\n    }\r\n  });\r\n\r\n  function total(scores) {\r\n    let total = 0;\r\n\r\n    for (const key in scores) {\r\n      if (typeof scores[key] === \"number\") {\r\n        total += scores[key];\r\n      }\r\n    }\r\n    return `Total: ${total}`;\r\n  }\r\n\r\n  function renderData() {\r\n    const listData = allData.map((newData, idx) => (\r\n      <div className=\"card\" key={idx}>\r\n        <div className=\"header\">\r\n          <span></span>\r\n          <span>{newData[\"player\"][\"nombre\"]}</span>\r\n        </div>\r\n        <div className=\"table\">\r\n          <div className=\"col\">\r\n            <label>Nombre</label>\r\n            <input type=\"text\" value={newData[\"nombre\"]} disabled></input>\r\n            {newData[\"stop_scores\"].length > 0 ? (\r\n              <ScoreSelector\r\n                fieldName=\"nombre\"\r\n                readOnly={true}\r\n                selectedItem={newData[\"stop_scores\"][0][\"nombre\"]}\r\n              />\r\n            ) : null}\r\n          </div>\r\n          <div className=\"col\">\r\n            <label>Apellido</label>\r\n            <input type=\"text\" value={newData[\"apellido\"]} disabled></input>\r\n            {newData[\"stop_scores\"].length > 0 ? (\r\n              <ScoreSelector\r\n                fieldName=\"apellido\"\r\n                readOnly={true}\r\n                selectedItem={newData[\"stop_scores\"][0][\"apellido\"]}\r\n              />\r\n            ) : null}\r\n          </div>\r\n          <div className=\"col\">\r\n            <label>Ciudad</label>\r\n            <input type=\"text\" value={newData[\"ciudad\"]} disabled></input>\r\n            {newData[\"stop_scores\"].length > 0 ? (\r\n              <ScoreSelector\r\n                fieldName=\"ciudad\"\r\n                readOnly={true}\r\n                selectedItem={newData[\"stop_scores\"][0][\"ciudad\"]}\r\n              />\r\n            ) : null}\r\n          </div>\r\n          <div className=\"col\">\r\n            <label>País</label>\r\n            <input type=\"text\" value={newData[\"pais\"]} disabled></input>\r\n            {newData[\"stop_scores\"].length > 0 ? (\r\n              <ScoreSelector\r\n                fieldName=\"pais\"\r\n                readOnly={true}\r\n                selectedItem={newData[\"stop_scores\"][0][\"pais\"]}\r\n              />\r\n            ) : null}\r\n          </div>\r\n          <div className=\"col\">\r\n            <label>Animal</label>\r\n            <input type=\"text\" value={newData[\"animal\"]} disabled></input>\r\n            {newData[\"stop_scores\"].length > 0 ? (\r\n              <ScoreSelector\r\n                fieldName=\"animal\"\r\n                readOnly={true}\r\n                selectedItem={newData[\"stop_scores\"][0][\"animal\"]}\r\n              />\r\n            ) : null}\r\n          </div>\r\n          <div className=\"col\">\r\n            <label>Fruta</label>\r\n            <input type=\"text\" value={newData[\"fruta\"]} disabled></input>\r\n            {newData[\"stop_scores\"].length > 0 ? (\r\n              <ScoreSelector\r\n                fieldName=\"fruta\"\r\n                readOnly={true}\r\n                selectedItem={newData[\"stop_scores\"][0][\"fruta\"]}\r\n              />\r\n            ) : null}\r\n          </div>\r\n          <div className=\"col\">\r\n            <label>Color</label>\r\n            <input type=\"text\" value={newData[\"color\"]} disabled></input>\r\n            {newData[\"stop_scores\"].length > 0 ? (\r\n              <ScoreSelector\r\n                fieldName=\"color\"\r\n                readOnly={true}\r\n                selectedItem={newData[\"stop_scores\"][0][\"color\"]}\r\n              />\r\n            ) : null}\r\n          </div>\r\n          <div className=\"col\">\r\n            <label>Cosa</label>\r\n            <input type=\"text\" value={newData[\"cosa\"]} disabled></input>\r\n            {newData[\"stop_scores\"].length > 0 ? (\r\n              <ScoreSelector\r\n                fieldName=\"cosa\"\r\n                readOnly={true}\r\n                selectedItem={newData[\"stop_scores\"][0][\"cosa\"]}\r\n              />\r\n            ) : null}\r\n          </div>\r\n          <div className=\"hole hole-top\"></div>\r\n          <div className=\"hole hole-bottom\"></div>\r\n        </div>\r\n        <span>\r\n          {newData[\"stop_scores\"].length > 0\r\n            ? total(newData[\"stop_scores\"][0])\r\n            : null}\r\n        </span>\r\n      </div>\r\n    ));\r\n\r\n    return listData;\r\n  }\r\n  console.log(\"allData: \", allData);\r\n  return (\r\n    <div>\r\n      <div className={`flip-card ${allData.length > 0 ? \"flip\" : \"\"}`}>\r\n        <div className=\"flip-card-inner\">\r\n          <div className=\"flip-card-front\">\r\n            <div className=\"card\">\r\n              <div className=\"players-list\">\r\n                <h2>Jugando...</h2>\r\n                <ol>\r\n                  {players.map(player => (\r\n                    <li>{player}</li>\r\n                  ))}\r\n                </ol>\r\n              </div>\r\n              <div className=\"hole hole-top-right\"></div>\r\n              <div className=\"hole hole-bottom-right\"></div>\r\n            </div>\r\n          </div>\r\n          <div className={\"flip-card-back\"}>\r\n            {allData.length > 0 ? renderData() : null}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { useMutation, useSubscription } from \"@apollo/react-hooks\";\r\n\r\nconst GET_PLAYERS_ON = gql`\r\n  subscription GetPlayerOn($game_id: Int!) {\r\n    games_players(where: { game_id: { _eq: $game_id } }) {\r\n      player_id\r\n    }\r\n  }\r\n`;\r\n\r\nconst INSERT_PLAYER = gql`\r\n  mutation InsertPlayer($nombre: String!) {\r\n    insert_players(objects: { nombre: $nombre }) {\r\n      returning {\r\n        id\r\n        nombre\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst PlayersModal = props => {\r\n  const { visible, closeModal } = props;\r\n  const [disabled, setDisabled] = useState(false);\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const [insertPlayer] = useMutation(INSERT_PLAYER);\r\n\r\n  const playersOn = useSubscription(GET_PLAYERS_ON, {\r\n    variables: { game_id: props.gameID },\r\n    onSubscriptionData: ({ subscriptionData }) => {\r\n      let playersOnTheGame = subscriptionData.data.games_players.map(\r\n        player => player.player_id\r\n      );\r\n\r\n      if (playersOnTheGame.length === props.numberOfPlayers) {\r\n        setDisabled(true);\r\n        window.location.reload();\r\n        alert(\r\n          \"Lo sentimos, ya están completos los jugadores para esta partida\"\r\n        );\r\n      }\r\n    }\r\n  });\r\n\r\n  function createPlayer(e, playerName) {\r\n    if (playerName.trim() === \"\") {\r\n      alert(\"El nombre de usuario no puede ser vacío.\");\r\n    } else {\r\n      const pattern = RegExp(\r\n        \"^[a-zA-Z0-9äáàëéèíìïöóòúüùñÁÉÍÓÚÀÈÌÒÙÄËÏÖÜÑ]{1,}$\"\r\n      );\r\n      playerName = playerName.trim();\r\n      if (pattern.test(playerName)) {\r\n        insertPlayer({ variables: { nombre: playerName } }).then(res => {\r\n          props.getPlayerInfo(\r\n            res.data.insert_players.returning[0].id,\r\n            playerName\r\n          );\r\n          closeModal();\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  function onChange(e) {\r\n    setPlayerName(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {visible ? (\r\n        <div className=\"players-card\">\r\n          <h1>Elige tu nombre de usuario</h1>\r\n          <span>{`Total jugadores en la partida: ${\r\n            playersOn.data ? playersOn.data.games_players.length : 0\r\n          }/${props.numberOfPlayers}`}</span>\r\n          <input\r\n            type=\"text\"\r\n            onChange={e => onChange(e)}\r\n            placeholder=\"Nombre de usuario\"\r\n          ></input>\r\n          <button\r\n            className=\"purple-button\"\r\n            onClick={e => createPlayer(e, playerName)}\r\n            disabled={disabled}\r\n          >\r\n            Crear usuario\r\n          </button>\r\n        </div>\r\n      ) : null}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PlayersModal;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useSubscription, useMutation } from \"@apollo/react-hooks\";\r\nimport gql from \"graphql-tag\";\r\nimport MyCard from \"./MyCard\";\r\nimport OpponentCard from \"./OpponentCard\";\r\nimport PlayersModal from \"./PlayersModal\";\r\nimport \"./App.scss\";\r\n\r\nconst INSERT_GAME = gql`\r\n  mutation InsertGame($letter: String!, $number_of_players: Int!) {\r\n    insert_games(\r\n      objects: { letter: $letter, number_of_players: $number_of_players }\r\n    ) {\r\n      returning {\r\n        id\r\n        letter\r\n        number_of_players\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_LAST_GAME = gql`\r\n  subscription GetlastGame {\r\n    games(limit: 1, order_by: { id: desc }) {\r\n      id\r\n      letter\r\n      number_of_players\r\n    }\r\n  }\r\n`;\r\n\r\nfunction App() {\r\n  const [gameID, setGameID] = useState(null);\r\n  const [gameLetter, setGameLetter] = useState(null);\r\n  const [playerID, setPlayerID] = useState(null);\r\n  const [playerName, setPlayerName] = useState(null);\r\n  const [temporalGameId, setTemporalGameId] = useState(null);\r\n  const [active, setActive] = useState(false);\r\n  const [visibleModal, setVisibleModal] = useState(false);\r\n  const [numberOfPlayers, setNumberOfPlayers] = useState(null);\r\n  let tempNumOfPlayers = null;\r\n\r\n  const [InsertGame] = useMutation(INSERT_GAME);\r\n  const { loading, data } = useSubscription(GET_LAST_GAME);\r\n\r\n  const prevGameIdRef = useRef();\r\n  const prevGameId = prevGameIdRef.current;\r\n\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      prevGameIdRef.current = data.games[0].id;\r\n    }\r\n  });\r\n\r\n  if (!loading) {\r\n    // Should activate game ?\r\n    // If useEffect() detects a change on DB, activates a game\r\n    if (temporalGameId !== prevGameId) {\r\n      setTemporalGameId(prevGameId);\r\n    }\r\n    if (typeof temporalGameId == \"number\" && !active) {\r\n      setGameID(data.games[0].id);\r\n      setGameLetter(data.games[0].letter);\r\n      setNumberOfPlayers(data.games[0].number_of_players);\r\n      setActive(true);\r\n      showModal();\r\n    }\r\n  }\r\n\r\n  function chooseLetter(length = 1) {\r\n    var result = \"\";\r\n    var characters = \"ABCDEFGHIJKLMNOPQRSTUVYZ\";\r\n    var charactersLength = characters.length;\r\n    for (var i = 0; i < length; i++) {\r\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function newGame() {\r\n    const pattern = RegExp(\"^[2-9]{1}$\");\r\n\r\n    if (pattern.test(tempNumOfPlayers)) {\r\n      InsertGame({\r\n        variables: {\r\n          letter: chooseLetter(),\r\n          number_of_players: tempNumOfPlayers\r\n        }\r\n      }).then(res => {\r\n        // Create a new game\r\n        setGameID(res.data.insert_games.returning[0].id);\r\n        setGameLetter(res.data.insert_games.returning[0].letter);\r\n        setNumberOfPlayers(\r\n          res.data.insert_games.returning[0].number_of_players\r\n        );\r\n      });\r\n\r\n      setActive(true);\r\n      showModal();\r\n    } else {\r\n      alert(\"Cantidad mínima de jugadores: 2. Máximo: 9\");\r\n    }\r\n  }\r\n\r\n  function showModal() {\r\n    setVisibleModal(true);\r\n  }\r\n\r\n  function closeModal() {\r\n    setVisibleModal(false);\r\n  }\r\n\r\n  function getPlayerInfo(id, name) {\r\n    setPlayerID(id);\r\n    setPlayerName(name);\r\n  }\r\n\r\n  function onChange(e) {\r\n    const pattern = RegExp(\"^[2-9]{1}$\");\r\n    if (e.target.value.length > 1) {\r\n      e.target.value = e.target.value.slice(0, 1);\r\n    }\r\n\r\n    if (pattern.test(e.target.value)) {\r\n      tempNumOfPlayers = e.target.value;\r\n    } else {\r\n      e.target.value = null;\r\n      tempNumOfPlayers = null;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {active ? (\r\n        <React.Fragment>\r\n          {visibleModal ? (\r\n            <PlayersModal\r\n              visible={visibleModal}\r\n              closeModal={closeModal}\r\n              getPlayerInfo={getPlayerInfo}\r\n              gameID={gameID}\r\n              numberOfPlayers={numberOfPlayers}\r\n            />\r\n          ) : (\r\n            <React.Fragment>\r\n              <MyCard\r\n                currentPlayer={playerID}\r\n                currentPlayerName={playerName}\r\n                game={gameID}\r\n                gameLetter={gameLetter}\r\n                numberOfPlayers={numberOfPlayers}\r\n              />\r\n              <OpponentCard currentPlayer={playerID} game={gameID} />\r\n            </React.Fragment>\r\n          )}\r\n        </React.Fragment>\r\n      ) : (\r\n        <React.Fragment>\r\n          <div className=\"stop-title\">Stop!</div>\r\n          <div className=\"start-game\">\r\n            <label>Cantidad de jugadores: </label>\r\n            <input\r\n              type=\"number\"\r\n              onChange={e => onChange(e)}\r\n              max={9}\r\n              min={2}\r\n            ></input>\r\n          </div>\r\n\r\n          <button onClick={() => newGame()} className=\"new-game\">\r\n            Nueva partida\r\n          </button>\r\n        </React.Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { WebSocketLink } from \"apollo-link-ws\";\r\nimport { ApolloClient } from \"apollo-client\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\n\r\nexport default new ApolloClient({\r\n  cache: new InMemoryCache(),\r\n  link: new WebSocketLink({\r\n    // uri: \"wss://pixel-art-tutorial.herokuapp.com/v1/graphql\",\r\n    uri: \"wss://pixelart-hasura.herokuapp.com/v1/graphql\",\r\n    options: {\r\n      reconnect: true\r\n    }\r\n  })\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\n\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport connection from \"./connection\";\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={connection}>\r\n    <App />\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}